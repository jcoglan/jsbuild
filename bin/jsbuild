#!/usr/bin/env node

var fs      = require('fs'),
    path    = require('path'),
    nopt    = require('nopt'),

    options = { manifest:     Array,
                root:         path,
                external:     Boolean,
                stylesheets:  Boolean,
                packages:     Boolean,
                bundles:      path,
                output:       String,
                directory:    path
              },

    shorts  = { 'm': '--manifest',
                'r': '--root',
                'e': '--external',
                's': '--stylesheets',
                'p': '--packages',
                'P': '--no-packages',
                'b': '--bundles',
                'o': '--output',
                'd': '--directory'
              },

    outputs = ['code', 'paths'],

    params  = nopt(options, shorts),
    include = params.argv.remain.slice(),
    dir     = new RegExp('^' + path.resolve(params.directory || process.cwd()) + '/')

var P            = require('../lib/package'),
    bundle       = require('../lib/bundle'),
    die          = require('../lib/die'),
    expand       = require('../lib/expand'),
    expandBundle = require('../lib/expand_bundle'),
    packageFiles = require('../lib/package_files')

P.ROOT = path.resolve(params.root || process.cwd())
P.ENV.JS = P

if (params.output && outputs.indexOf(params.output) < 0)
  die('--output must be one of: ' + outputs.join(', '))

if (include.length === 0) {
  console.error('\nUsage: jsbuild --manifest MANIFEST --root ROOT [OPTIONS] module1 [module2 ...]')

  console.error('\nOptions:  --manifest,    -m : path to JS.Packages manifest script')
  console.error('          --root,        -r : directory containing your JavaScripts')
  console.error('          --external,    -e : include external scripts from the web')
  console.error('          --stylesheets, -s : embed required CSS stylesheets in JS')
  console.error('          --no-packages, -P : don\'t include JS.Package system in build')
  console.error('          --bundles,     -b : path to bundle definitions file')
  console.error('          --output,      -o : select output type: \'code\' or \'paths\'')
  console.error('          --directory,   -d : directory for paths to print relative to')

  console.error('\ne.g. jsbuild -m path/to/js/manifest.js -r path/to/js/ -Pe jQuery JS.Set\n')

  process.exit(1)
}

if (params.manifest)
  params.manifest.forEach(function(manifest) {
    var pathname = path.resolve(manifest)
    P.ENV.JSCLASS_PATH = path.dirname(manifest)
    require(pathname)
  })

var packages = [],
    excluded = [],
    bundles  = params.bundles ? JSON.parse(fs.readFileSync(params.bundles)) : {},
    source   = [],
    output   = function() { console.log(source.join('\n\n')) }

include.forEach(function(inc) {
  if (bundles[inc]) expandBundle(P.Package, bundles, packages, excluded, inc)
  else expand(P.Package, inc, packages)
})

var includedFiles = packageFiles(params, packages),
    excludedFiles = packageFiles(params, excluded),
    files         = includedFiles.slice()

excludedFiles.forEach(function(exclude) {
  var index = files.indexOf(exclude)
  if (index >= 0) files.splice(index, 1)
})

if (params.output === 'paths') {
  var formatPath = function(s) { return path.resolve(s).replace(dir, '') }
  console.log(files.map(formatPath).join('\n'))
  process.exit()
}

if (params.packages !== false)
  source.push(fs.readFileSync(__dirname + '/../lib/package.js'))

bundle(P.ROOT, files, 0, function(code) {
  if (code === undefined) output()
  else source.push(code)
})

